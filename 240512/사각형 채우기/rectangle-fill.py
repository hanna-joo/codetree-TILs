"""
[DP : subproblem을 그대로 합치면 되는 DP]
1. 문제 : 사각형 채우기
- 2 * n 크기의 사각형을 1 * 2, 2 * 1 크기의 사각형들로 채우는 방법의 수
    - ex. n = 3 일 때 3가지 (||| / =| / |=)
- return : 2 * n 크기의 사각형 채우는 방법의 수 % 10,007

2. 입력 및 제한
- 첫째 줄 : n (1 <= n <= 1,000)

3. 로직
- 사각형 추가하는 방법 : | / =
- 2 * i 크기의 사각형을 만드는 방법은 
    - 2 * (i-1) 크기에 | 추가하는 방법
    - 2 * (i-2) 크기에 = 추가하는 방법
- dp[i] = dp[i-1] + dp[i-2]
    - dp[1] = n이 1일 때, | -> 1가지
    - dp[2] = n이 2일 때, || = -> 2가지
    - dp[3] = n이 3일 때, ||+|, =+|, |+= -> 3가지
    - dp[4] = |||+|, =|+|, |=+|, =+=, ||+= -> 5가지
    - dp[5] = ||||+|, =||+|, |=|+|, ==+|, ||=+|, |||+=, =|+=, |=+= -> 8가지
"""

MAX_N = 1000
MOD = 10007

# 입력 변수
n = int(input())

# 메모이제이션
dp = [0 for i in range(MAX_N + 1)]

# 초깃값 설정
dp[1] = 1
dp[2] = 2

# 동적 계획법
for i in range(3, n + 1):
    dp[i] = dp[i-1] + dp[i-2]


print(dp[n] % 10007)